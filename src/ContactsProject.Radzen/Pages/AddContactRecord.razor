@inject AppService AppService
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject HttpClient HttpClient

<style>
    .rz-fileupload-content {
        display: none;
    }
</style>

<RadzenColumn SizeMD=12>
    <RadzenTemplateForm TItem="Contact" Data="@record" Submit="OnSubmit">
        <RadzenStack>
            <RadzenFormField Text="First Name" Variant="Variant.Filled">
                <ChildContent>
                    <RadzenTextBox style="display:block;width:100%;" Name="FirstName" @bind-Value="@record.FirstName" />
                </ChildContent>
            </RadzenFormField>
            <RadzenFormField Text="Last Name" Variant="Variant.Filled">
                <ChildContent>
                    <RadzenTextBox style="display:block;width:100%;" Name="LastName" @bind-Value="@record.LastName" />
                </ChildContent>
            </RadzenFormField>
            <RadzenFormField Text="Birthday" Variant="Variant.Filled">
                <ChildContent>
                    <RadzenDatePicker ShowTime="true" ShowSeconds="true" style="display:block;width:100%;" TValue="DateTime" Name="Birthday" @bind-Value="@record.Birthday" />
                </ChildContent>
            </RadzenFormField>
            <RadzenFormField Text="Phone Number" Variant="Variant.Filled">
                <ChildContent>
                    <RadzenTextBox style="display:block;width:100%;" Name="PhoneNumber" @bind-Value="@record.PhoneNumber" />
                </ChildContent>
            </RadzenFormField>
            <RadzenFormField Text="Email" Variant="Variant.Filled">
                <ChildContent>
                    <RadzenTextBox style="display:block;width:100%;" Name="Email" @bind-Value="@record.Email" />
                </ChildContent>
            </RadzenFormField>
            <RadzenFormField Text="Street Address" Variant="Variant.Filled">
                <ChildContent>
                    <RadzenTextBox style="display:block;width:100%;" Name="StreetAddress" @bind-Value="@record.StreetAddress" />
                </ChildContent>
            </RadzenFormField>
            <RadzenFormField Text="City" Variant="Variant.Filled">
                <ChildContent>
                    <RadzenTextBox style="display:block;width:100%;" Name="City" @bind-Value="@record.City" />
                </ChildContent>
            </RadzenFormField>
            <RadzenFormField Text="State" Variant="Variant.Filled">
                <ChildContent>
                    <RadzenTextBox style="display:block;width:100%;" Name="State" @bind-Value="@record.State" />
                </ChildContent>
            </RadzenFormField>
            <RadzenFormField Text="Zip" Variant="Variant.Filled">
                <ChildContent>
                    <RadzenNumeric style="display:block;width:100%;" TValue="int" Name="Zip" @bind-Value="@record.Zip" />
                </ChildContent>
            </RadzenFormField>
        </RadzenStack>
        <RadzenStack style="margin-top:1rem;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
            <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Submit" Icon="save" Text="Save" Variant="Variant.Flat" />
            <RadzenButton ButtonStyle="ButtonStyle.Light" Text="Cancel" Variant="Variant.Flat" Click="Cancel" />
        </RadzenStack>
    </RadzenTemplateForm>
</RadzenColumn>

@code {
    private Contact record = new();

    private string GetAbsoluteUri(string uri)
    {
        if (!uri.StartsWith("/"))
        {
            return uri;
        }

        var baseUri = HttpClient.BaseAddress;

        if (baseUri == null)
        {
            throw new Exception("Unable to determine base address");
        }

        Uri absolute = new(baseUri, uri);

        return absolute.ToString();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
        }
        catch (Exception ex)
        {
            NotificationMessage message = new()
            {
                Severity = NotificationSeverity.Error,
                Summary = "Add Failed",
                Detail = ex.Message,
                Duration = 4000
            };

            NotificationService.Notify(message);
        }
    }

    private void Cancel()
    {
        DialogService.Close();
    }

    private async Task OnSubmit()
    {
        try
        {
            await AppService.InsertContactAsync(record);
            DialogService.Close();
        }
        catch (Exception ex)
        {
            NotificationMessage message = new()
            {
                Severity = NotificationSeverity.Error,
                Summary = "Add Failed",
                Detail = ex.Message,
                Duration = 4000
            };

            NotificationService.Notify(message);
        }
    }
}
